unit proto.auth; {125}

interface

// *********************************** 
//   classes for proto.auth.proto
//   generated by ProtoBufGenerator 
//        kami-soft 2016-2017
// ***********************************

uses
  SysUtils,
  Classes,
  Generics.Collections,
  pbInput,
  pbOutput,
  pbPublic,
  uAbstractProtoBufClasses,
  proto.common;

type
  TResultTypeEnum=(
    RESULT_TYPE_OK = 0,
    RESULT_TYPE_INVALID_LOGIN_PASSWORD = 1
  );

  TAuthRequest = class(TAbstractProtoBufClass)
  public
    const tag_login = 1;
    const tag_password = 2;
  strict private
    Flogin: string;
    Fpassword: string;

    procedure Setlogin(Tag: Integer; const Value: string);
    procedure Setpassword(Tag: Integer; const Value: string);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    constructor Create; override;
    destructor Destroy; override;

    property login: string index tag_login read Flogin write Setlogin;
    property password: string index tag_password read Fpassword write Setpassword;
  end;

  TAuthResponse = class(TAbstractProtoBufClass)
  public
    const tag_result = 1;
    const tag_operator_code = 2;
    const tag_operator_name = 3;
    const tag_rolesList = 4;
  strict private
    Fresult: TResultTypeEnum;
    Foperator_code: Cardinal;
    Foperator_name: string;
    FrolesList: TList<TUserRoleEnum>;

    procedure Setresult(Tag: Integer; const Value: TResultTypeEnum);
    procedure Setoperator_code(Tag: Integer; const Value: Cardinal);
    procedure Setoperator_name(Tag: Integer; const Value: string);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    constructor Create; override;
    destructor Destroy; override;

    property result: TResultTypeEnum index tag_result read Fresult write Setresult;
    property operator_code: Cardinal index tag_operator_code read Foperator_code write Setoperator_code;
    property operator_name: string index tag_operator_name read Foperator_name write Setoperator_name;
    property rolesList: TList<TUserRoleEnum> read FrolesList;
  end;

implementation

{ TAuthRequest }

constructor TAuthRequest.Create;
begin
  inherited;
  RegisterRequiredField(tag_login);
  RegisterRequiredField(tag_password);
end;

destructor TAuthRequest.Destroy;
begin
  inherited;
end;

function TAuthRequest.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_login:
      login := ProtoBuf.readString;
    tag_password:
      password := ProtoBuf.readString;
  else
    Result := False;
  end;
end;

procedure TAuthRequest.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_login] then
    ProtoBuf.writeString(tag_login, Flogin);
  if FieldHasValue[tag_password] then
    ProtoBuf.writeString(tag_password, Fpassword);
end;

procedure TAuthRequest.Setlogin(Tag: Integer; const Value: string);
begin
  Flogin:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TAuthRequest.Setpassword(Tag: Integer; const Value: string);
begin
  Fpassword:= Value;
  FieldHasValue[Tag]:= True;
end;

{ TAuthResponse }

constructor TAuthResponse.Create;
begin
  inherited;
  RegisterRequiredField(tag_result);
  FrolesList := TList<TUserRoleEnum>.Create;
end;

destructor TAuthResponse.Destroy;
begin
  FrolesList.Free;
  inherited;
end;

function TAuthResponse.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_result:
      result := TResultTypeEnum(ProtoBuf.readEnum) = RESULT_TYPE_OK;
    tag_operator_code:
      operator_code := ProtoBuf.readUInt32;
    tag_operator_name:
      operator_name := ProtoBuf.readString;
    tag_rolesList:
      FrolesList.Add(TUserRoleEnum(ProtoBuf.readEnum));
  else
    Result := False;
  end;
end;

procedure TAuthResponse.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
var
  i: Integer;
begin
  inherited;
  if FieldHasValue[tag_result] then
    ProtoBuf.writeInt32(tag_result, Integer(Fresult));
  if FieldHasValue[tag_operator_code] then
    ProtoBuf.writeUInt32(tag_operator_code, Foperator_code);
  if FieldHasValue[tag_operator_name] then
    ProtoBuf.writeString(tag_operator_name, Foperator_name);
  if FieldHasValue[tag_rolesList] then
    for i := 0 to FrolesList.Count-1 do
      ProtoBuf.writeInt32(tag_rolesList, Integer(FrolesList[i]));
end;

procedure TAuthResponse.Setresult(Tag: Integer; const Value: TResultTypeEnum);
begin
  Fresult:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TAuthResponse.Setoperator_code(Tag: Integer; const Value: Cardinal);
begin
  Foperator_code:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TAuthResponse.Setoperator_name(Tag: Integer; const Value: string);
begin
  Foperator_name:= Value;
  FieldHasValue[Tag]:= True;
end;

end.
