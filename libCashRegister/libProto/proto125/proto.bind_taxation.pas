unit proto.bind_taxation; {125}

interface

// *********************************** 
//   classes for proto.bind_taxation.proto
//   generated by ProtoBufGenerator 
//        kami-soft 2016-2017
// ***********************************

uses
  SysUtils,
  Classes,
  pbInput,
  pbOutput,
  pbPublic,
  uAbstractProtoBufClasses,
  proto.common;

type
  TBindedTax = class(TAbstractProtoBufClass)
  public
    const tag_tax_type = 1;
    const tag_percent = 2;
  strict private
    Ftax_type: Cardinal;
    Fpercent: Cardinal;

    procedure Settax_type(Tag: Integer; const Value: Cardinal);
    procedure Setpercent(Tag: Integer; const Value: Cardinal);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    constructor Create; override;
    destructor Destroy; override;

    property tax_type: Cardinal index tag_tax_type read Ftax_type write Settax_type;
    property percent: Cardinal index tag_percent read Fpercent write Setpercent;
  end;

  TBindedTaxation = class(TAbstractProtoBufClass)
  public
    const tag_taxation_type = 1;
    const tag_taxesList = 2;
  strict private
    Ftaxation_type: Cardinal;
    FtaxesList: TProtoBufClassList<TBindedTax>;

    procedure Settaxation_type(Tag: Integer; const Value: Cardinal);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    constructor Create; override;
    destructor Destroy; override;

    property taxation_type: Cardinal index tag_taxation_type read Ftaxation_type write Settaxation_type;
    property taxesList: TProtoBufClassList<TBindedTax> read FtaxesList;
  end;

implementation

{ TBindedTax }

constructor TBindedTax.Create;
begin
  inherited;
  RegisterRequiredField(tag_tax_type);
  RegisterRequiredField(tag_percent);
end;

destructor TBindedTax.Destroy;
begin
  inherited;
end;

function TBindedTax.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_tax_type:
      tax_type := ProtoBuf.readUInt32;
    tag_percent:
      percent := ProtoBuf.readUInt32;
  else
    Result := False;
  end;
end;

procedure TBindedTax.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_tax_type] then
    ProtoBuf.writeUInt32(tag_tax_type, Ftax_type);
  if FieldHasValue[tag_percent] then
    ProtoBuf.writeUInt32(tag_percent, Fpercent);
end;

procedure TBindedTax.Settax_type(Tag: Integer; const Value: Cardinal);
begin
  Ftax_type:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TBindedTax.Setpercent(Tag: Integer; const Value: Cardinal);
begin
  Fpercent:= Value;
  FieldHasValue[Tag]:= True;
end;

{ TBindedTaxation }

constructor TBindedTaxation.Create;
begin
  inherited;
  RegisterRequiredField(tag_taxation_type);
  FtaxesList := TProtoBufClassList<TBindedTax>.Create;
end;

destructor TBindedTaxation.Destroy;
begin
  FtaxesList.Free;
  inherited;
end;

function TBindedTaxation.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_taxation_type:
      taxation_type := ProtoBuf.readUInt32;
    tag_taxesList:
      FtaxesList.AddFromBuf(ProtoBuf, fieldNumber);
  else
    Result := False;
  end;
end;

procedure TBindedTaxation.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_taxation_type] then
    ProtoBuf.writeUInt32(tag_taxation_type, Ftaxation_type);
  if FieldHasValue[tag_taxesList] then
    FtaxesList.SaveToBuf(ProtoBuf, tag_taxesList);
end;

procedure TBindedTaxation.Settaxation_type(Tag: Integer; const Value: Cardinal);
begin
  Ftaxation_type:= Value;
  FieldHasValue[Tag]:= True;
end;

end.
