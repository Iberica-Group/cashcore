unit proto.reginfo; {125}

interface

// *********************************** 
//   classes for proto.reginfo.proto
//   generated by ProtoBufGenerator 
//        kami-soft 2016-2017
// ***********************************

uses
  SysUtils,
  Classes,
  pbInput,
  pbOutput,
  pbPublic,
  uAbstractProtoBufClasses;

type
  TKkmRegInfo = class(TAbstractProtoBufClass)
  public
    const tag_point_of_payment_number = 1;
    const tag_terminal_number = 2;
    const tag_fns_kkm_id = 3;
    const tag_serial_number = 4;
    const tag_kkm_id = 5;
  strict private
    Fpoint_of_payment_number: string;
    Fterminal_number: string;
    Ffns_kkm_id: string;
    Fserial_number: string;
    Fkkm_id: string;

    procedure Setpoint_of_payment_number(Tag: Integer; const Value: string);
    procedure Setterminal_number(Tag: Integer; const Value: string);
    procedure Setfns_kkm_id(Tag: Integer; const Value: string);
    procedure Setserial_number(Tag: Integer; const Value: string);
    procedure Setkkm_id(Tag: Integer; const Value: string);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    property point_of_payment_number: string index tag_point_of_payment_number read Fpoint_of_payment_number write Setpoint_of_payment_number;
    property terminal_number: string index tag_terminal_number read Fterminal_number write Setterminal_number;
    property fns_kkm_id: string index tag_fns_kkm_id read Ffns_kkm_id write Setfns_kkm_id;
    property serial_number: string index tag_serial_number read Fserial_number write Setserial_number;
    property kkm_id: string index tag_kkm_id read Fkkm_id write Setkkm_id;
  end;

  TPosRegInfo = class(TAbstractProtoBufClass)
  public
    const tag_title = 1;
    const tag_address = 2;
  strict private
    Ftitle: string;
    Faddress: string;

    procedure Settitle(Tag: Integer; const Value: string);
    procedure Setaddress(Tag: Integer; const Value: string);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    property title: string index tag_title read Ftitle write Settitle;
    property address: string index tag_address read Faddress write Setaddress;
  end;

  TOrgRegInfo = class(TAbstractProtoBufClass)
  public
    const tag_title = 1;
    const tag_address = 2;
    const tag_inn = 3;
    const tag_taxation_type = 4;
    const tag_okved = 5;
  strict private
    Ftitle: string;
    Faddress: string;
    Finn: string;
    Ftaxation_type: Cardinal;
    Fokved: string;

    procedure Settitle(Tag: Integer; const Value: string);
    procedure Setaddress(Tag: Integer; const Value: string);
    procedure Setinn(Tag: Integer; const Value: string);
    procedure Settaxation_type(Tag: Integer; const Value: Cardinal);
    procedure Setokved(Tag: Integer; const Value: string);
  strict protected
    function LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean; override;
    procedure SaveFieldsToBuf(ProtoBuf: TProtoBufOutput); override;
  public
    property title: string index tag_title read Ftitle write Settitle;
    property address: string index tag_address read Faddress write Setaddress;
    property inn: string index tag_inn read Finn write Setinn;
    property taxation_type: Cardinal index tag_taxation_type read Ftaxation_type write Settaxation_type;
    property okved: string index tag_okved read Fokved write Setokved;
  end;

implementation

{ TKkmRegInfo }

function TKkmRegInfo.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_point_of_payment_number:
      point_of_payment_number := ProtoBuf.readString;
    tag_terminal_number:
      terminal_number := ProtoBuf.readString;
    tag_fns_kkm_id:
      fns_kkm_id := ProtoBuf.readString;
    tag_serial_number:
      serial_number := ProtoBuf.readString;
    tag_kkm_id:
      kkm_id := ProtoBuf.readString;
  else
    Result := False;
  end;
end;

procedure TKkmRegInfo.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_point_of_payment_number] then
    ProtoBuf.writeString(tag_point_of_payment_number, Fpoint_of_payment_number);
  if FieldHasValue[tag_terminal_number] then
    ProtoBuf.writeString(tag_terminal_number, Fterminal_number);
  if FieldHasValue[tag_fns_kkm_id] then
    ProtoBuf.writeString(tag_fns_kkm_id, Ffns_kkm_id);
  if FieldHasValue[tag_serial_number] then
    ProtoBuf.writeString(tag_serial_number, Fserial_number);
  if FieldHasValue[tag_kkm_id] then
    ProtoBuf.writeString(tag_kkm_id, Fkkm_id);
end;

procedure TKkmRegInfo.Setpoint_of_payment_number(Tag: Integer; const Value: string);
begin
  Fpoint_of_payment_number:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TKkmRegInfo.Setterminal_number(Tag: Integer; const Value: string);
begin
  Fterminal_number:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TKkmRegInfo.Setfns_kkm_id(Tag: Integer; const Value: string);
begin
  Ffns_kkm_id:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TKkmRegInfo.Setserial_number(Tag: Integer; const Value: string);
begin
  Fserial_number:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TKkmRegInfo.Setkkm_id(Tag: Integer; const Value: string);
begin
  Fkkm_id:= Value;
  FieldHasValue[Tag]:= True;
end;

{ TPosRegInfo }

function TPosRegInfo.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_title:
      title := ProtoBuf.readString;
    tag_address:
      address := ProtoBuf.readString;
  else
    Result := False;
  end;
end;

procedure TPosRegInfo.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_title] then
    ProtoBuf.writeString(tag_title, Ftitle);
  if FieldHasValue[tag_address] then
    ProtoBuf.writeString(tag_address, Faddress);
end;

procedure TPosRegInfo.Settitle(Tag: Integer; const Value: string);
begin
  Ftitle:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TPosRegInfo.Setaddress(Tag: Integer; const Value: string);
begin
  Faddress:= Value;
  FieldHasValue[Tag]:= True;
end;

{ TOrgRegInfo }

function TOrgRegInfo.LoadSingleFieldFromBuf(ProtoBuf: TProtoBufInput; FieldNumber: Integer; WireType: Integer): Boolean;
begin
  Result := inherited;
  if Result then
    Exit;
  Result := True;
  case FieldNumber of
    tag_title:
      title := ProtoBuf.readString;
    tag_address:
      address := ProtoBuf.readString;
    tag_inn:
      inn := ProtoBuf.readString;
    tag_taxation_type:
      taxation_type := ProtoBuf.readUInt32;
    tag_okved:
      okved := ProtoBuf.readString;
  else
    Result := False;
  end;
end;

procedure TOrgRegInfo.SaveFieldsToBuf(ProtoBuf: TProtoBufOutput);
begin
  inherited;
  if FieldHasValue[tag_title] then
    ProtoBuf.writeString(tag_title, Ftitle);
  if FieldHasValue[tag_address] then
    ProtoBuf.writeString(tag_address, Faddress);
  if FieldHasValue[tag_inn] then
    ProtoBuf.writeString(tag_inn, Finn);
  if FieldHasValue[tag_taxation_type] then
    ProtoBuf.writeUInt32(tag_taxation_type, Ftaxation_type);
  if FieldHasValue[tag_okved] then
    ProtoBuf.writeString(tag_okved, Fokved);
end;

procedure TOrgRegInfo.Settitle(Tag: Integer; const Value: string);
begin
  Ftitle:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TOrgRegInfo.Setaddress(Tag: Integer; const Value: string);
begin
  Faddress:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TOrgRegInfo.Setinn(Tag: Integer; const Value: string);
begin
  Finn:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TOrgRegInfo.Settaxation_type(Tag: Integer; const Value: Cardinal);
begin
  Ftaxation_type:= Value;
  FieldHasValue[Tag]:= True;
end;

procedure TOrgRegInfo.Setokved(Tag: Integer; const Value: string);
begin
  Fokved:= Value;
  FieldHasValue[Tag]:= True;
end;

end.
